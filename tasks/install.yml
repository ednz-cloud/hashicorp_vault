---
# task/install file for hashicorp_vault
- name: "Get latest release of vault"
  when: hashi_vault_version == 'latest'
  block:
    - name: "Get latest vault release from github api"
      ansible.builtin.uri:
        url: "{{ hashi_vault_github_api }}/hashicorp/vault/releases/latest"
        return_content: true
      register: _hashi_vault_latest_release

    - name: "Set wanted vault version to latest tag"
      ansible.builtin.set_fact:
        _hashi_vault_wanted_version: "{{ _hashi_vault_latest_release.json['tag_name']|regex_replace('v', '') }}"

- name: "Set wanted vault version to {{ hashi_vault_version }}"
  ansible.builtin.set_fact:
    _hashi_vault_wanted_version: "{{ hashi_vault_version|regex_replace('v', '') }}"
  when: hashi_vault_version != 'latest'

- name: "Get current vault version"
  block:
    - name: "Stat vault version file"
      ansible.builtin.stat:
        path: "{{ hashi_vault_config_dir }}/.version"
      changed_when: false
      check_mode: false
      register: _hashi_vault_version_file

    - name: "Get current vault version"
      ansible.builtin.slurp:
        src: "{{ _hashi_vault_version_file.stat.path }}"
      when:
        - _hashi_vault_version_file.stat.exists
        - _hashi_vault_version_file.stat.isreg
      register: _hashi_vault_current_version

- name: "Download and install vault binary"
  when: _hashi_vault_current_version is not defined
    or _hashi_vault_wanted_version != (_hashi_vault_current_version.content|default('')|b64decode)
  block:
    - name: "Set vault package name to download"
      ansible.builtin.set_fact:
        _hashi_vault_package_name: >-
          vault_{{ _hashi_vault_wanted_version }}_linux_{{ hashi_vault_deb_architecture_map[ansible_architecture] }}.zip
        _hashi_vault_shasum_file_name: >-
          vault_{{ _hashi_vault_wanted_version }}_SHA256SUMS

    - name: "Download checksum file for vault archive"
      ansible.builtin.get_url:
        url: "{{ hashi_vault_repository_url }}/{{ _hashi_vault_wanted_version }}/{{ _hashi_vault_shasum_file_name }}"
        dest: "/tmp/{{ _hashi_vault_shasum_file_name }}"
        mode: "0644"
      register: _hashi_vault_checksum_file
      until: _hashi_vault_checksum_file is succeeded
      retries: 5
      delay: 2
      check_mode: false

    - name: "Extract correct checksum from checksum file"
      ansible.builtin.command:
        cmd: 'grep "{{ _hashi_vault_package_name }}" /tmp/{{ _hashi_vault_shasum_file_name }}'
      changed_when: false
      register: _hashi_vault_expected_checksum_line

    - name: "Parse the expected checksum"
      ansible.builtin.set_fact:
        _hashi_vault_expected_checksum: "{{ _hashi_vault_expected_checksum_line.stdout.split()[0] }}"

    - name: "Download vault binary archive"
      ansible.builtin.get_url:
        url: "{{ hashi_vault_repository_url }}/{{ _hashi_vault_wanted_version }}/{{ _hashi_vault_package_name }}"
        dest: "/tmp/{{ _hashi_vault_package_name }}"
        mode: "0644"
        checksum: "sha256:{{ _hashi_vault_expected_checksum }}"
      register: _hashi_vault_binary_archive
      until: _hashi_vault_binary_archive is succeeded
      retries: 5
      delay: 2
      check_mode: false

    - name: "Create temporary directory for archive decompression"
      ansible.builtin.file:
        path: /tmp/vault
        state: directory
        mode: "0755"

    - name: "Unpack vault archive"
      ansible.builtin.unarchive:
        src: "/tmp/{{ _hashi_vault_package_name }}"
        dest: "/tmp/vault"
        owner: "{{ hashi_vault_user }}"
        group: "{{ hashi_vault_group }}"
        mode: "0755"
        remote_src: true

    - name: "Copy vault binary to {{ hashi_vault_binary_path }}"
      ansible.builtin.copy:
        src: /tmp/vault/vault
        dest: "{{ hashi_vault_binary_path }}"
        owner: root
        group: root
        mode: "0755"
        remote_src: true
        force: true

    - name: "Update vault version file"
      ansible.builtin.copy:
        content: "{{ _hashi_vault_wanted_version }}"
        dest: "{{ hashi_vault_config_dir }}/.version"
        owner: "{{ hashi_vault_user }}"
        group: "{{ hashi_vault_group }}"
        mode: "0600"

    - name: "Set restart-check variable"
      ansible.builtin.set_fact:
        _hashi_vault_service_need_restart: true

    - name: "Cleanup temporary directory"
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - /tmp/vault
        - /tmp/{{ _hashi_vault_package_name }}
        - /tmp/{{ _hashi_vault_shasum_file_name }}

- name: "Copy systemd service file for vault"
  ansible.builtin.template:
    src: "vault.service.j2"
    dest: "/etc/systemd/system/{{ hashi_vault_service_name }}.service"
    owner: root
    group: root
    mode: "0644"
  register: _hashi_vault_unit_file

- name: "Set reload-check & restart-check variable"
  ansible.builtin.set_fact:
    _hashi_vault_service_need_reload: true
    _hashi_vault_service_need_restart: true
  when: _hashi_vault_unit_file.changed # noqa: no-handler

- name: "Copy systemd service file for vault"
  ansible.builtin.template:
    src: "vault.service.j2"
    dest: "/etc/systemd/system/vault.service"
    owner: root
    group: root
    mode: "0644"
  notify:
    - "systemctl-daemon-reload"
